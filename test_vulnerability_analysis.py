#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
脆弱性分析APIテストスクリプト

このスクリプトは新しく実装された脆弱性分析APIをテストします。
1. プレースホルダ置換でテストリクエストを生成
2. リクエストを実行
3. 結果を分析して脆弱性を検出
"""

import requests
import json
import time
import sys

BASE_URL = "http://localhost:8000"

def authenticate():
    """認証を行ってトークンを取得"""
    print("1. 認証中...")
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data)
    if response.status_code != 200:
        print(f"認証に失敗しました: {response.status_code}")
        print(response.text)
        return None
    
    token_data = response.json()
    token = token_data["access_token"]
    print(f"認証成功: {token_data['user']['username']}")
    return token

def create_test_request(token):
    """XSS/SQLインジェクション用のテストリクエストを作成"""
    print("\n2. テストリクエスト作成中...")
    
    # XSS、SQLインジェクション、時間ベース攻撃を含むペイロード
    payload_data = {
        "template": "GET /hack/normalxss.php?cmd=<<>> HTTP/1.1\nHost: bogus.jp\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\nAccept: text/html,application/xhtml+xml\nAccept-Language: ja,en-US;q=0.9,en;q=0.8",
        "placeholders": ["cmd"],
        "strategy": "sniper",
        "payload_sets": [
            {
                "name": "vulnerability_test",
                "payloads": [
                    "<script>alert('XSS')</script>",  # XSS テスト
                    "' OR '1'='1",  # SQLインジェクション
                    "'; WAITFOR DELAY '00:00:03'--",  # 時間ベースSQLインジェクション
                    "<img src=x onerror=alert('XSS2')>",  # 別のXSSパターン
                    "admin'--",  # SQLコメントアウト
                    "1' UNION SELECT null,version(),null--",  # SQL UNION
                    "javascript:alert('XSS3')",  # JavaScriptプロトコル
                    "<svg/onload=alert('XSS4')>"  # SVG XSS
                ]
            }
        ]
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(f"{BASE_URL}/api/replace-placeholders", 
                           json=payload_data, headers=headers)
    
    if response.status_code != 200:
        print(f"リクエスト作成に失敗: {response.status_code}")
        print(response.text)
        return None
    
    result = response.json()
    request_id = result["request_id"]
    print(f"テストリクエスト作成成功: ID={request_id}, 総リクエスト数={result['total_requests']}")
    return request_id

def execute_test_request(token, request_id):
    """テストリクエストを実行"""
    print(f"\n3. リクエスト実行中 (ID: {request_id})...")
    
    execute_data = {
        "request_id": request_id,
        "http_config": {
            "scheme": "http",
            "base_url": "bogus.jp",
            "timeout": 10,
            "follow_redirects": True,
            "verify_ssl": False,
            "sequential_execution": True,
            "request_delay": 0.5  # 少し遅延を入れて時間分析をテスト
        }
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(f"{BASE_URL}/api/execute-requests", 
                           json=execute_data, headers=headers)
    
    if response.status_code != 200:
        print(f"リクエスト実行に失敗: {response.status_code}")
        print(response.text)
        return None
    
    result = response.json()
    job_id = result["job_id"]
    print(f"ジョブ開始: {job_id}")
    
    # ジョブの完了を待つ
    print("ジョブ完了を待機中...")
    max_attempts = 30
    for attempt in range(max_attempts):
        time.sleep(2)
        
        response = requests.get(f"{BASE_URL}/api/jobs/{job_id}", headers=headers)
        if response.status_code != 200:
            print(f"ジョブ状態取得に失敗: {response.status_code}")
            return None
        
        job_status = response.json()
        status = job_status["status"]
        progress = job_status["progress"]
        
        print(f"  {attempt + 1}/30: Status={status}, Progress={progress.get('progress_percentage', 0):.1f}%")
        
        if status == "completed":
            print("ジョブ完了!")
            return job_id
        elif status in ["failed", "cancelled"]:
            print(f"ジョブが{status}状態で終了しました")
            return None
    
    print("ジョブ完了をタイムアウトしました")
    return None

def analyze_vulnerabilities(token, job_id):
    """脆弱性分析を実行"""
    print(f"\n4. 脆弱性分析実行中 (Job ID: {job_id})...")
    
    # カスタム分析設定
    analysis_config = {
        "error_patterns": [
            "sql error", "database error", "mysql", "postgresql", 
            "syntax error", "exception", "stack trace", "error:",
            "warning:", "fatal error", "parse error"
        ],
        "time_threshold": 1.5,  # 1.5秒以上の遅延を検出
        "check_payload_reflection": True,
        "check_error_patterns": True,
        "check_time_delay": True
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(f"{BASE_URL}/api/jobs/{job_id}/analyze", 
                           json=analysis_config, headers=headers)
    
    if response.status_code != 200:
        print(f"分析に失敗: {response.status_code}")
        print(response.text)
        return None
    
    analysis_result = response.json()
    print(f"分析完了!")
    print(f"総リクエスト数: {analysis_result['total_requests']}")
    print(f"分析済みリクエスト数: {analysis_result['analyzed_requests']}")
    print(f"発見された脆弱性: {analysis_result['vulnerability_count']}")
    
    if analysis_result['baseline_response_time']:
        print(f"ベースラインレスポンス時間: {analysis_result['baseline_response_time']:.3f}秒")
    
    return analysis_result

def display_analysis_results(analysis_result):
    """分析結果を詳細表示"""
    print(f"\n5. 分析結果詳細:")
    print("=" * 80)
    
    # サマリー表示
    summary = analysis_result['analysis_summary']
    print(f"分析サマリー:")
    print(f"  - 分析済みリクエスト: {summary['analyzed_requests']}")
    print(f"  - 発見された脆弱性: {summary['total_vulnerabilities']}")
    
    severity_dist = summary['severity_distribution']
    print(f"  - 深刻度別:")
    for severity, count in severity_dist.items():
        if count > 0:
            print(f"    * {severity.upper()}: {count}")
    
    vuln_types = summary['vulnerability_types']
    if vuln_types:
        print(f"  - 脆弱性タイプ別:")
        for vuln_type, count in vuln_types.items():
            print(f"    * {vuln_type}: {count}")
    
    # 個別の検出結果表示
    if analysis_result['findings']:
        print(f"\n詳細な検出結果:")
        print("-" * 80)
        
        for i, finding in enumerate(analysis_result['findings'], 1):
            print(f"\n[{i}] リクエスト #{finding['request_number']}")
            print(f"脆弱性タイプ: {finding['vulnerability_type']}")
            print(f"深刻度: {finding['severity'].upper()}")
            print(f"説明: {finding['description']}")
            print(f"根拠: {finding['evidence']}")
            
            if finding['payload']:
                print(f"ペイロード: {finding['payload']}")
            
            if finding['response_snippet']:
                snippet = finding['response_snippet']
                if len(snippet) > 200:
                    snippet = snippet[:200] + "..."
                print(f"レスポンス抜粋: {snippet}")
    else:
        print("\n脆弱性は検出されませんでした。")

def test_analysis_with_get_method(token, job_id):
    """GET メソッドでの分析APIもテスト"""
    print(f"\n6. GET メソッドでの分析テスト...")
    
    # GETパラメータで分析設定を指定
    params = {
        "error_patterns": "sql error,database error,exception,stack trace",
        "time_threshold": 2.0,
        "check_payload_reflection": True,
        "check_error_patterns": True,
        "check_time_delay": True
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/api/jobs/{job_id}/analyze", 
                          params=params, headers=headers)
    
    if response.status_code != 200:
        print(f"GET分析に失敗: {response.status_code}")
        print(response.text)
        return False
    
    result = response.json()
    print(f"GET分析完了: {result['vulnerability_count']}個の脆弱性を検出")
    return True

def main():
    """メイン実行関数"""
    print("=== 脆弱性分析APIテスト ===")
    
    try:
        # 1. 認証
        token = authenticate()
        if not token:
            sys.exit(1)
        
        # 2. テストリクエスト作成
        request_id = create_test_request(token)
        if not request_id:
            sys.exit(1)
        
        # 3. リクエスト実行
        job_id = execute_test_request(token, request_id)
        if not job_id:
            sys.exit(1)
        
        # 4. 脆弱性分析（POST）
        analysis_result = analyze_vulnerabilities(token, job_id)
        if not analysis_result:
            sys.exit(1)
        
        # 5. 結果表示
        display_analysis_results(analysis_result)
        
        # 6. GET メソッドテスト
        test_analysis_with_get_method(token, job_id)
        
        print(f"\n=== テスト完了 ===")
        print(f"脆弱性分析APIが正常に動作しています！")
        
    except KeyboardInterrupt:
        print("\nテストが中断されました")
        sys.exit(1)
    except Exception as e:
        print(f"\nエラーが発生しました: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 